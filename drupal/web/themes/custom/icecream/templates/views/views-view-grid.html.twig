<style>
  /* === Blog Grid Layout === */
  .custom-views-grid { 
      display: flex !important;
      flex-wrap: wrap !important;
      gap: 40px !important;  
      justify-content: center !important;
      max-width: 1200px;
      margin: auto;
  }

  {# .title {
    color: yellow !important;
} #}


  .custom-row {
      display: flex !important;
      width: 100% !important;
      justify-content: space-between !important;
      gap:20px;
  }

  .custom-col {
      flex: 1 !important;
      max-width: 30% !important; /* Adjust to keep three columns */
      padding: 15px !important;
      background: rgb(0, 0, 0) !important;
      border-radius: 10px !important;
      text-align: left !important;
      {# box-shadow: 0px 4px 8px rgba(241, 230, 66, 0.9); #}
      transition: transform 0.3s ease-in-out;
      gap:10px;
  }

  /* Hover effect */
  .custom-col:hover {
      transform: scale(1.03);
  }

  /* === Blog Category Title === */
  .custom-category {
      font-size: 20px;
      font-weight: bold;
      color: blue;
      padding: 10px 0;
  }

  /* === Blog Title Styling (Updated to White/Yellow) === */
  {# .custom-title {
      font-size: 22px !important;
      font-weight: bold;
      color: white !important;
      margin-top: 10px;
  } #}
   /* === Blog Title Styling (Updated to White) === */
 .custom-title-link a {
    color: white !important; 
    text-decoration: none !important;
}

.custom-title-link a:hover {
    color: #ffcc00 !important; /* Change to yellow on hover */
}


  /* === Image Styling === */
  .custom-col img {
      width: 100% !important;
      height: 200px !important;
      object-fit: cover;
      border-radius: 8px !important;
  }

  /* === Blog Subtitle === */
  .custom-subtitle {
      font-size: 16px;
      color: gray;
      margin: 5px 0;
  }

  /* === Icons for Like, Comment, Views === */
  .custom-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-top: 10px;
      font-size: 14px;
      color: #ddd;
  }

  .custom-meta span {
      display: flex;
      align-items: center;
      gap: 5px;
  }

  .custom-meta i {
      font-size: 16px;
      color: #ffcc00; /* Changed to yellow for better contrast */
  }
</style>

{# <div{{ attributes.addClass('custom-views-grid') }}>
  {% for row in items %}
    <div{{ row.attributes.addClass('custom-row') }}>
      {% for column in row.content %}
        <div{{ column.attributes.addClass('custom-col') }}>
          {{- column.content -}}
          <div class="custom-meta" data-nid="{{ column.content['#node'].id }}">
            <!-- Likes Button (Static) -->
            <span class="like-btn static-btn" data-nid="{{ column.content['#node'].id }}">
              <i class="fas fa-heart"></i> <span class="likes-count">0</span>
            </span>
            
            <!-- Views (Static) -->
            <span class="view-btn static-btn"><i class="fas fa-eye"></i> <span class="views-count">0</span></span>
            
            <!-- Comments (Static for now) -->
            <span><i class="fas fa-comment"></i> 0</span>
          </div>
        </div>
      {% endfor %}
    </div>
  {% endfor %}
</div>

<!-- FontAwesome for Icons -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/js/all.min.js" crossorigin="anonymous"></script>

<script>
  let totalLikes = 0;
  let totalViews = 0;

  document.querySelectorAll(".view-btn").forEach(button => {
    button.addEventListener("click", () => {
      totalViews++;
      button.querySelector(".views-count").innerText = totalViews;
    });
  });

  document.querySelectorAll(".like-btn").forEach(button => {
    button.addEventListener("click", () => {
      totalLikes++;
      button.querySelector(".likes-count").innerText = totalLikes;
      button.style.color = "green";
    });
  });
</script>

<style>
  .static-btn {
    display: inline-flex;
    align-items: center;
    gap: 5px;
    cursor: pointer;
    transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;
  }
  .static-btn:hover {
    transform: scale(1.1);
  }
</style> #}


{{ attach_library('icecream/js/blog_interactions') }}
<div{{ attributes.addClass('custom-views-grid') }}>
  {% for row in items %}
    <div{{ row.attributes.addClass('custom-row') }}>
      {% for column in row.content %}
        <div{{ column.attributes.addClass('custom-col') }}>
          {{- column.content -}}
          
          {% if column.content['#node'] is defined and column.content['#node'].id is defined %}
            {% set nid = column.content['#node'].id %}
            {% set likes = column.content['#node'].field_likes.value|default(0) %}
            {% set views = column.content['#node'].field_views.value|default(0) %}
          {% else %}
            {% set nid = 0 %}
            {% set likes = 0 %}
            {% set views = 0 %}
          {% endif %}

          <div class="custom-meta" data-nid="{{ nid }}">
            <!-- Like Button -->
            <button class="like-btn"><i class="fas fa-heart"></i> <span class="likes-count">{{ likes }}</span></button>
            
            <!-- View Count -->
<button class="bookmark-btn" data-nid="{{ node.nid.value }}">
  <i class="far fa-star"></i> Bookmark
</button>

            
            <!-- Comments (Static for now) -->
            <span><i class="fas fa-comment"></i> 0</span>
          </div>

        </div>
      {% endfor %}
    </div>
  {% endfor %}
</div>


<!-- FontAwesome for Icons -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/js/all.min.js" crossorigin="anonymous"></script>

<script>
document.querySelectorAll(".like-btn").forEach(button => {
  button.addEventListener("click", async () => {
    let metaElement = button.closest(".custom-meta");
    if (!metaElement) {
      console.error("Error: .custom-meta not found for", button);
      return;
    }

    let nid = metaElement.getAttribute("data-nid");
    if (!nid || nid === "0") {
      console.error("Error: Node ID is missing or invalid");
      return;
    }

    try {
      let response = await fetch(`/api/blog/${nid}/like`, { method: "POST" });
      let data = await response.json();
      
      if (data.status === "success") {
        let count = button.querySelector(".likes-count");
        count.innerText = data.new_likes_count; // Update from API
        button.style.color = "green";
      }
    } catch (error) {
      console.error("Error updating likes:", error);
    }
  });
});

document.querySelectorAll(".view-btn").forEach(button => {
  button.addEventListener("click", async () => {
    let metaElement = button.closest(".custom-meta");
    if (!metaElement) {
      console.error("‚ùå ERROR: .custom-meta not found for", button);
      return;
    }

    let nid = metaElement.getAttribute("data-nid");
    if (!nid || nid === "0") {
      console.error("‚ùå ERROR: Invalid Node ID", nid);
      return;
    }

    let url = `/api/blog/${nid}/view`;
    console.log("üîó Fetching URL:", url);  // ‚úÖ Log the request URL

    try {
      let response = await fetch(url, { method: "POST" });

      console.log("‚úÖ Fetch Response:", response);  // ‚úÖ Log full response

      if (!response.ok) {
        console.error("‚ùå ERROR: Response not OK", response.status);
        return;
      }

      let data = await response.json();
      console.log("‚úÖ API Data:", data);

      if (data.status === "success") {
        let countElement = button.querySelector(".views-count");
        if (countElement) {
          countElement.innerText = data.new_views_count;  // ‚úÖ Update UI
        } else {
          console.error("‚ùå ERROR: .views-count not found inside .view-btn");
        }
      }
    } catch (error) {
      console.error("‚ùå ERROR: Fetch failed", error);
    }
  });
});

</script>

<style>
  .like-btn, .view-btn {
    display: inline-flex;
    align-items: center;
    gap: 5px;
    cursor: pointer;
    transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;
  }
  .like-btn:hover, .view-btn:hover {
    transform: scale(1.1);
  }
  .like-btn {
    color: black;
  }
  .like-btn.active {
    color: red;
  }
</style>


<script>
  document.querySelectorAll('.bookmark-btn').forEach(btn => {
  btn.addEventListener('click', function() {
    let nid = this.getAttribute('data-nid'); // Get the Node ID

    if (!nid || isNaN(nid)) {  // Check if nid is missing or invalid
      console.error("‚ùå Missing or invalid Node ID for bookmark request.");
      return;
    }

    console.log("‚úÖ Bookmark clicked! Sending request for NID:", nid);

    fetch(`/blog/${nid}/bookmark`, {  // Ensure nid is properly appended
      method: 'POST',
      headers: { 
        'X-Requested-With': 'XMLHttpRequest',
        'Content-Type': 'application/json'
      },
      credentials: 'same-origin'
    })
    .then(response => response.json())
    .then(data => {
      console.log("‚úÖ Response received:", data);
      if (data.status === 'added') {
        this.innerHTML = '<i class="fas fa-star"></i> Bookmarked';
      } else {
        this.innerHTML = '<i class="far fa-star"></i> Bookmark';
      }
    })
    .catch(error => console.error("‚ùå AJAX Error:", error));
  });
});



</script>